# WAF监控系统使用说明

## 1. 准备环境
确保您的系统已经安装了 Python 3.6 或更高版本。
通过以下命令安装所有依赖：

```bash
cd site_monitor  # 先进入项目根目录
python3 install.py
```

这个命令会自动安装必要的依赖库并创建所需的目录结构。

## 2. 配置系统

### 2.1 全局配置文件
编辑 `conf/global.json` 文件，包含以下全局配置项：

```json
{
  "monitor_groups": ["group1", "group2", "group3", "group4", "group5", "group6"],
  "watchdog_check_interval": 120,
  "watchdog_max_restarts": 10,
  "startup_wait_time": 15,
  "wechat_webhook_url": "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=您的key",
  "watchdog_wechat_webhook_url": "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=您的key",
  "smtp_server": "smtp.example.com",
  "smtp_port": 587,
  "sender_email": "sender@example.com",
  "sender_password": "密码",
  "receiver_email": "user1@example.com, user2@example.com",
  "watchdog_receiver_email": "admin@example.com, support@example.com",
  "enable_wechat_alert": true,
  "enable_email_alert": true
}
```

### 2.2 监控组配置
每个监控组有独立的配置文件：`conf/group1.json`, `conf/group2.json` 等，内容示例：

```json
{
  "group_name": "group1",
  "monitor_interval": 60,
  "unhealthy_threshold": 3,
  "response_timeout": 2,
  "enable_wechat_alert": true,
  "enable_email_alert": true
}
```

### 2.3 监控URL列表
在 `conf/targets_group1.txt` 文件中添加要监控的URL，每行一个：

```
https://www.example.com/  ;示例站点1
https://api.example.com/  ;示例站点2
```

## 3. 运行系统

### 3.1 启动所有监控组
```bash
cd site_monitor  # 先进入项目根目录
python3 start_all.py
```

### 3.2 启动单个监控组
直接运行单个监控组脚本时，如果SSH连接断开，进程会被终止：
```bash
cd site_monitor  # 先进入项目根目录
python3 monitor_group1.py  # 注意：SSH断开连接后会终止
```

要让单个监控组在SSH断开后继续运行，请使用nohup命令：
```bash
cd site_monitor  # 先进入项目根目录
nohup python3 monitor_group1.py > logs/group1_startup.log 2>&1 &
```

您也可以使用screen或tmux工具来保持会话：
```bash
# 使用screen
screen -S monitor_group1
cd site_monitor  # 先进入项目根目录
python3 monitor_group1.py
# 按Ctrl+A然后按D分离会话

# 使用tmux
tmux new -s monitor_group1
cd site_monitor  # 先进入项目根目录
python3 monitor_group1.py
# 按Ctrl+B然后按D分离会话
```

### 3.3 停止所有监控
```bash
cd site_monitor  # 先进入项目根目录
python3 stop_all.py
```

### 3.4 查看系统状态
```bash
cd site_monitor  # 先进入项目根目录
python3 status.py
```

## 4. 日志说明

系统日志位于 `logs` 目录下，每个监控组有独立的日志文件夹：

- `monitor.log` - 监控状态日志
- `health.log` - 健康状态日志
- `alert.log` - 告警日志
- `unhealthy.log` - 不健康状态日志

日志每天午夜自动轮转，历史日志名称格式为 `log_type.log.yyyy-mm-dd`

## 5. 告警机制

当URL连续不健康次数达到阈值时，系统会发送告警。URL被视为不健康的条件:
- HTTP状态码不是200
- 响应时间超过配置的超时时间
- 连接异常或其他错误

告警支持两种方式：
- 企业微信机器人（通过Webhook）
- 邮件通知（支持多收件人）

## 6. 常见问题

### 6.1 如何修改监控目标？
编辑对应的 `conf/targets_group*.txt` 文件，系统会自动加载最新的URL列表。

### 6.2 如何调整监控频率？
修改对应组的配置文件中的 `monitor_interval` 值（单位：秒）。

### 6.3 如何关闭某种告警方式？
在配置文件中将 `enable_wechat_alert` 或 `enable_email_alert` 设置为 `false`。

### 6.4 系统稳定性说明
系统最新版本（2025-05-14）对稳定性进行了重要增强，解决了之前可能在长时间运行后自动停止的问题。主要改进包括：

- 监控线程由非守护线程执行，防止主进程退出导致监控线程终止
- 增加了线程状态自动检测和恢复机制
- 增强了异常处理，提高系统容错能力
- 改进了错误日志记录，方便问题排查

## 6.5 崩溃诊断与问题排查

系统提供了完善的崩溃诊断机制，可帮助您找出程序意外停止的原因。

### 6.5.1 崩溃日志查看

当系统意外停止时，会在以下位置记录崩溃信息：
- `logs/<group>/crash.log` - 崩溃相关的日志
- `logs/<group>/crashes/` - 详细的崩溃报告（JSON格式）
- `data/last_activity_<group>.json` - 最后活动状态

### 6.5.2 使用崩溃报告工具

提供了专门的崩溃报告查询工具：

```bash
cd site_monitor  # 先进入项目根目录
# 列出所有崩溃记录
python3 crash_report.py group1

# 查看最近一次崩溃
python3 crash_report.py group1 --last

# 查看特定崩溃记录详情
python3 crash_report.py group1 1

# 查看所有组的崩溃信息
python3 crash_report.py all
```

### 6.5.3 常见崩溃原因及解决方案

1. **内存不足**：
   - 症状：崩溃报告中显示高内存使用率
   - 解决：减少监控URL数量或增加服务器内存

2. **网络问题**：
   - 症状：大量连接超时或连接错误异常
   - 解决：检查网络连接，调整timeout参数

3. **线程异常退出**：
   - 症状：崩溃报告中有线程相关异常
   - 解决：升级Python版本或增加线程错误处理

4. **系统信号终止**：
   - 症状：崩溃类型为"signal"
   - 解决：检查系统日志，确认是否有OOM或其他系统级终止

如果系统依然出现停止运行的情况，可执行以下命令重启系统：
```bash 
cd site_monitor  # 先进入项目根目录
python3 stop_all.py && python3 start_all.py
```

## 7. 分组管理最佳实践

系统支持6个独立的监控组（group1-group6），建议根据以下原则进行URL分组：

### 7.1 分组原则
- 每组URL数量建议控制在30个以内，避免单个组负载过高
- 将相似类型或相关联的URL放在同一组
- 根据重要程度分组，便于设置不同的监控频率和告警策略

### 7.2 资源配置建议
- 对于32核服务器，建议每组最多30个URL
- 对于16核服务器，建议每组最多20个URL
- 监控间隔不建议低于30秒，以避免过度消耗资源

### 7.3 URL注释格式
在targets文件中，可以使用分号添加URL注释，格式如下：
```
https://www.example.com/  ;集群1-132.122.249.6&7(group1)
```
注释内容会在告警信息中显示，便于快速定位问题。

## 附录：配置参数说明

### A1. 全局配置参数 (conf/global.json)

| 参数名 | 说明 | 示例值 |
|--------|------|--------|
| monitor_groups | 监控组列表，指定哪些组需要启动（数组类型，包含字符串元素） | ["group1", "group2", "group3", "group4", "group5", "group6"] |
| watchdog_check_interval | 监控进程检查间隔，单位秒（整数类型） | 120 |
| watchdog_max_restarts | 监控进程最大重启次数（整数类型） | 10 |
| startup_wait_time | 启动等待时间，单位秒（整数类型） | 15 |
| wechat_webhook_url | 企业微信机器人的Webhook地址（字符串类型，必须是有效的URL） | "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=您的key" |
| watchdog_wechat_webhook_url | 守护进程专用的企业微信Webhook地址（字符串类型，必须是有效的URL） | "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=您的key" |
| smtp_server | 邮件服务器地址（字符串类型） | "smtp.example.com" |
| smtp_port | 邮件服务器端口（整数类型，常见值为25, 465, 587） | 587 |
| sender_email | 发件人邮箱（字符串类型，必须是有效的邮箱格式） | "sender@example.com" |
| sender_password | 发件人密码（字符串类型） | "密码" |
| receiver_email | 收件人邮箱，多个收件人用逗号或分号分隔（字符串类型） | "user1@example.com, user2@example.com" |
| watchdog_receiver_email | 守护进程专用的接收邮箱，多个收件人用逗号或分号分隔（字符串类型） | "admin@example.com, support@example.com" |
| enable_wechat_alert | 是否启用企业微信告警（布尔类型，只能是true或false） | true |
| enable_email_alert | 是否启用邮件告警（布尔类型，只能是true或false） | true |

### A2. 监控组配置参数 (conf/group*.json)

| 参数名 | 说明 | 示例值 |
|--------|------|--------|
| group_name | 监控组名称（字符串类型） | "group1" |
| monitor_interval | 监控间隔时间，单位秒（整数类型） | 60 |
| unhealthy_threshold | 连续不健康次数阈值，达到此值时发送告警（整数类型） | 3 |
| response_timeout | 响应超时时间，单位秒（整数或浮点数类型） | 2 |
| wechat_webhook_url | 企业微信机器人的Webhook地址（可选，覆盖全局配置）（字符串类型，必须是有效的URL） | "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxx" |
| enable_wechat_alert | 该组是否启用企业微信告警（布尔类型，只能是true或false） | true |
| enable_email_alert | 该组是否启用邮件告警（布尔类型，只能是true或false） | true |

### A3. URL格式说明 (conf/targets_group*.txt)

每行一个URL，支持添加注释：
```
https://www.example.com/  ;示例站点1 - 后面可以加注释说明
https://api.example.com/status  ;API状态检查点
# 这行是注释，会被忽略
http://internal.example.com/health  ;内部健康检查
```