# WAF监控系统使用指南

## 1. 系统简介
WAF监控系统用于监控多组URL的健康状态，当检测到URL不健康时自动发送告警通知。系统支持多组独立监控，可适应不同的监控需求和场景。

## 2. 快速开始

### 2.1 环境准备
确保您的系统已经安装了 Python 3.6 或更高版本。
通过以下命令安装所有依赖：

```bash
cd site_monitor  # 先进入项目根目录
python3 bin/install.py
```

这个命令会自动安装必要的依赖库并创建所需的目录结构。

### 2.2 基本配置
编辑 `conf/global.json` 文件，填写以下必要配置项：

```json
{
  "monitor_groups": ["group1", "group2", "group3", "group4", "group5", "group6"],
  "wechat_webhook_url": "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=您的key",
  "smtp_server": "smtp.example.com",
  "smtp_port": 587,
  "sender_email": "sender@example.com",
  "sender_password": "密码",
  "receiver_email": "user1@example.com, user2@example.com"
}
```

### 2.3 添加监控URL
在 `conf/targets_group1.txt` 文件中添加要监控的URL，每行一个：

```
https://www.example.com/  ;示例站点1
https://api.example.com/  ;示例站点2
```

## 3. 日常操作指南

### 3.1 启动系统
启动所有监控组（start_all.py本身已实现守护进程功能，即使SSH连接断开也会继续运行）：
```bash
cd site_monitor  # 先进入项目根目录
python3 bin/start_all.py
```

启动单个监控组：
```bash
cd site_monitor  # 先进入项目根目录
python3 bin/monitor_group1.py  # 注意：单个监控组脚本SSH断开连接后会终止
```

### 3.2 后台运行
如果需要启动单个监控组并在SSH断开后继续运行，请使用nohup命令：
```bash
cd site_monitor  # 先进入项目根目录
nohup python3 bin/monitor_group1.py > logs/group1_startup.log 2>&1 &
```

使用screen保持会话：
```bash
screen -S waf_monitor
cd site_monitor  # 先进入项目根目录
python3 bin/monitor_group1.py
# 按Ctrl+A然后按D分离会话
```

### 3.3 停止系统
```bash
cd site_monitor  # 先进入项目根目录
python3 bin/stop_all.py
```

### 3.4 查看系统状态
```bash
cd site_monitor  # 先进入项目根目录
python3 bin/status.py
```

### 3.5 查看日志
系统日志位于 `logs` 目录下，每个监控组有独立的日志文件夹：

```bash
# 查看监控状态日志
tail -f logs/group1/monitor.log

# 查看告警日志
tail -f logs/group1/alert.log

# 查看不健康状态日志
tail -f logs/group1/unhealthy.log
```

## 4. 配置管理

### 4.1 修改监控目标
编辑对应的 `conf/targets_group*.txt` 文件，系统会自动加载最新的URL列表，无需重启。

### 4.2 调整监控频率
修改对应组的配置文件 `conf/group*.json` 中的 `monitor_interval` 值（单位：秒）：

```json
{
  "group_name": "group1",
  "monitor_interval": 60,  // 修改此值调整监控频率
  "unhealthy_threshold": 3,
  "response_timeout": 2
}
```

### 4.3 设置告警阈值
修改对应组的配置文件中的 `unhealthy_threshold` 值，决定连续多少次不健康才发送告警。

### 4.4 管理告警开关
使用告警开关控制工具：

```bash
# 关闭所有组的企业微信告警
python3 bin/toggle_alerts.py --alert-type wechat --state off

# 开启group1的邮件告警
python3 bin/toggle_alerts.py --alert-type email --state on --scope group1
```

## 5. 问题排查指南

### 5.1 系统无法启动
检查以下几点：
- Python版本是否符合要求（3.6+）
- 依赖包是否正确安装
- 配置文件格式是否正确（JSON语法）
- 日志目录权限是否正确

### 5.2 监控意外停止
系统具有自我修复能力，但如果仍然停止，可检查：
- 查看崩溃日志了解原因
- 检查系统资源使用情况
- 确认网络连接状态
- 执行重启命令：`python3 bin/stop_all.py && python3 bin/start_all.py`

### 5.3 告警未发送
检查以下几点：
- 确认告警配置（微信webhook或邮件配置）是否正确
- 查看告警日志是否有错误记录
- 检查告警开关是否打开
- 尝试手动发送测试告警

### 5.4 资源使用过高
如果系统资源使用过高，可以：
- 减少监控URL数量
- 增加监控间隔时间
- 将URL分散到多个监控组
- 增加服务器资源配置

## 6. 崩溃诊断

### 6.1 崩溃日志查看
当系统意外停止时，会在以下位置记录崩溃信息：
- `logs/<group>/crash.log` - 崩溃相关的日志
- `logs/<group>/crashes/` - 详细的崩溃报告（JSON格式）
- `data/last_activity_<group>.json` - 最后活动状态

### 6.2 使用崩溃报告工具
提供了专门的崩溃报告查询工具：

```bash
cd site_monitor  # 先进入项目根目录
# 列出所有崩溃记录
python3 bin/crash_report.py group1

# 查看最近一次崩溃
python3 bin/crash_report.py group1 --last

# 查看特定崩溃记录详情
python3 bin/crash_report.py group1 1

# 查看所有组的崩溃信息
python3 bin/crash_report.py all
```

### 6.3 常见崩溃原因及解决方案

1. **内存不足**：
   - 症状：崩溃报告中显示高内存使用率
   - 解决：减少监控URL数量或增加服务器内存

2. **网络问题**：
   - 症状：大量连接超时或连接错误异常
   - 解决：检查网络连接，调整timeout参数

3. **线程异常退出**：
   - 症状：崩溃报告中有线程相关异常
   - 解决：升级Python版本或增加线程错误处理

4. **系统信号终止**：
   - 症状：崩溃类型为"signal"
   - 解决：检查系统日志，确认是否有OOM或其他系统级终止

## 7. 运维最佳实践

### 7.1 分组原则
- 每组URL数量建议控制在30个以内，避免单个组负载过高
- 将相似类型或相关联的URL放在同一组
- 根据重要程度分组，便于设置不同的监控频率和告警策略

### 7.2 资源配置建议
- 对于32核服务器，建议每组最多30个URL
- 对于16核服务器，建议每组最多20个URL
- 监控间隔不建议低于30秒，以避免过度消耗资源

### 7.3 URL注释格式
在targets文件中，可以使用分号添加URL注释，格式如下：
```
https://www.example.com/  ;集群1-132.122.249.6&7(group1)
```
注释内容会在告警信息中显示，便于快速定位问题。

### 7.4 日志维护
系统采用日志轮转机制，每天午夜自动轮转日志文件：
- 当前日志格式为：`log_type.log`
- 历史日志格式为：`log_type.log.yyyy-mm-dd`
- 系统保留30天的历史日志，超期自动清理

## 8. 配置参数参考

### 8.1 全局配置参数 (conf/global.json)

| 参数名 | 说明 | 示例值 |
|--------|------|--------|
| monitor_groups | 监控组列表，指定哪些组需要启动 | ["group1", "group2", "group3", "group4"] |
| watchdog_check_interval | 监控进程检查间隔，单位秒 | 120 |
| watchdog_max_restarts | 监控进程最大重启次数 | 10 |
| startup_wait_time | 启动等待时间，单位秒 | 15 |
| wechat_webhook_url | 企业微信机器人的Webhook地址 | "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=您的key" |
| watchdog_wechat_webhook_url | 守护进程专用的企业微信Webhook地址 | "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=您的key" |
| smtp_server | 邮件服务器地址 | "smtp.example.com" |
| smtp_port | 邮件服务器端口 | 587 |
| sender_email | 发件人邮箱 | "sender@example.com" |
| sender_password | 发件人密码 | "密码" |
| receiver_email | 收件人邮箱，多个收件人用逗号或分号分隔 | "user1@example.com, user2@example.com" |
| watchdog_receiver_email | 守护进程专用的接收邮箱 | "admin@example.com, support@example.com" |
| enable_wechat_alert | 是否启用企业微信告警 | true |
| enable_email_alert | 是否启用邮件告警 | true |

### 8.2 监控组配置参数 (conf/group*.json)

| 参数名 | 说明 | 示例值 |
|--------|------|--------|
| group_name | 监控组名称 | "group1" |
| monitor_interval | 监控间隔时间，单位秒 | 60 |
| unhealthy_threshold | 连续不健康次数阈值，达到此值时发送告警 | 3 |
| response_timeout | 响应超时时间，单位秒 | 2 |
| wechat_webhook_url | 企业微信机器人的Webhook地址（可选，覆盖全局配置） | "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxx" |
| enable_wechat_alert | 该组是否启用企业微信告警 | true |
| enable_email_alert | 该组是否启用邮件告警 | true |

### 8.3 URL格式说明 (conf/targets_group*.txt)

每行一个URL，支持添加注释：
```
https://www.example.com/  ;示例站点1 - 后面可以加注释说明
https://api.example.com/status  ;API状态检查点
# 这行是注释，会被忽略
http://internal.example.com/health  ;内部健康检查
```