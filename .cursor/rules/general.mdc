---
description: 
globs: 
alwaysApply: true
---
# 项目通用开发规范

## 1. 项目结构规范
### 目录结构

```
waf/
├── waf_monitor/              # 主要代码目录
│   ├── __init__.py
│   ├── monitor.py            # 监控核心逻辑
│   ├── alerter.py            # 告警处理模块
│   ├── utils.py              # 工具函数
│   └── watchdog.py           # 脚本运行监控模块
├── conf/                     # 配置目录
│   ├── global.json           # 全局共享配置（可选）
│   ├── group1.json           # 第一组配置
│   ├── group2.json           # 第二组配置
│   ├── group3.json           # 第三组配置
│   ├── group4.json           # 第四组配置
│   ├── targets_group1.txt    # 第一组监控目标
│   ├── targets_group2.txt    # 第二组监控目标
│   ├── targets_group3.txt    # 第三组监控目标
│   └── targets_group4.txt    # 第四组监控目标
├── logs/                     # 统一日志目录
│   ├── group1/               # 第一组日志
│   │   ├── monitor.log       # 监控状态日志
│   │   ├── health.log        # 健康状态日志
│   │   └── alert.log         # 告警日志
│   ├── group2/               # 第二组日志
│   ├── group3/               # 第三组日志
│   ├── group4/               # 第四组日志
│   └── watchdog/             # 脚本监控日志
├── data/                     # 数据存储
│   ├── state_group1.json     # 第一组状态
│   ├── state_group2.json     # 第二组状态
│   ├── state_group3.json     # 第三组状态
│   ├── state_group4.json     # 第四组状态
│   └── watchdog.json         # 进程监控状态数据
├── bin/                      # 可执行脚本目录
│   ├── monitor_group1.py     # 第一组监控脚本
│   ├── monitor_group2.py     # 第二组监控脚本
│   ├── monitor_group3.py     # 第三组监控脚本
│   ├── monitor_group4.py     # 第四组监控脚本
│   ├── start_all.py          # 启动所有组的脚本
│   ├── stop_all.py           # 停止所有组的脚本
│   ├── status.py             # 查看所有组状态脚本
│   ├── watchdog.py           # 监控脚本运行状态
│   └── install.py            # 安装依赖脚本
├── requirements.txt          # 项目依赖
└── README.md                  # 项目说明

```
### 组织原则
- 保持项目结构清晰，遵循模块化原则
- 相关功能应放在同一目录下
- 使用适当的目录命名，反映其包含内容

## 2. 代码规范
### 命名规范
```
类名：PascalCase（大驼峰）
函数名：camelCase（小驼峰）或 snake_case
常量：UPPER_SNAKE_CASE
变量：camelCase 或 snake_case
```
### 代码质量原则
- 遵循 SOLID 设计原则
- 避免代码重复（DRY原则）
- 保持代码简洁、清晰、易读
- 考虑代码的可维护性和可扩展性

### 异常处理
- 合理使用异常处理机制
- 提供清晰的错误信息
- 记录必要的错误日志
- 优雅处理边界情况

## 3. 文档规范
### 代码注释
```
/**
 * 函数功能说明
 *
 * @param {参数类型} 参数名 - 参数说明
 * @returns {返回类型} 返回值说明
 */
```
### 项目文档
- 及时更新 README 和技术文档
- 使用中文编写文档
- 包含必要的安装和使用说明
- 记录重要的架构决策

### 国际化准备
- 代码注释使用中文
- 错误信息和日志使用中文描述
- 预留国际化支持的接口

## 4. 开发环境
### 依赖管理
- 使用项目对应语言的包管理工具
- 锁定依赖版本，确保构建稳定性
- 定期更新依赖，修复安全隐患
- 优先使用现有库和工具，避免重新发明轮子

## 5. 版本控制规范
### 基础配置
- 使用 Git 作为版本控制系统
- 设置合适的 .gitignore 文件
- 保护主分支，实施分支权限控制

### 分支管理
- 采用规范的分支开发流程（如 Git Flow 或 Trunk Based Development）
- 主分支保持稳定，开发在特性分支进行
- 定期清理过期分支

### 提交规范
- 使用清晰的 commit 信息
- 每个提交专注于单一功能或修复
- 合理使用 tag 标记版本

### 代码审查
- 所有代码变更必须经过审查
- 遵循代码审查清单
- 及时响应审查意见
- 确保代码质量和一致性

## 6. 测试规范
### 测试原则
- 遵循测试金字塔原则
- 保持测试代码的整洁和可维护性
- 避免测试代码重复
- 关注测试覆盖率

### 测试类型
- 单元测试：测试独立功能单元
- 集成测试：测试模块间交互
- 端到端测试：测试完整业务流程
- 性能测试：关键功能性能验证

## 7. 安全规范
- 使用环境变量存储敏感配置
- 避免在代码中硬编码敏感信息
- 定期更新依赖包版本
- 实施安全扫描
